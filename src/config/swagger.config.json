{
    "swagger": "2.0",
    "info": {
        "title": "Link Up API Documentation",
        "version": "1.0.0",
        "description": "API for the Link Up Social Media Application",
        "contact": {
            "name": "Paul Sanga Nyamawi",
            "email": "paulsanganyamawi@gmail.com"
        },
        "licence": {
            "name": "TheJituLicence",
            "url": "www.thejitu.com"
        }
    },
    "host": "127.0.0.1:8080",
    "basePath": "/api/link-up/v1",
    "schemes": ["http"],
    "paths": {
        
        "/register": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Create a new user",
                "description": "Create a new user by providing user registration details.",
                "operationId": "newUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User registration details",
                        "required": true,
                        "schema": {"$ref": "#/definitions/User"}
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registred successfully"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409":{
                      "description": "Email address provided is already registered"
                    },
                    "422": {
                        "description": "Validation on user input failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/verify-user":{
            "post": {
                "tags": ["User Authentication"],
                "summary": "Verify registered user",
                "description": "Chenges user password from the OTP to a new password and set user's account to verified",
                "operationId": "verifyUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User verfication credentials",
                        "required": true,
                        "schema": {"$ref": "#/definitions/VerifyUserRegistration"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verification successfully"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid login credentials"
                    },
                    "422": {
                        "description": "Validation on user input failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/login": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Authenticates user",
                "description": "Authenticates user based off of the login credentials provided.",
                "operationId": "userLogin",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in":"body",
                        "name": "body",
                        "description": "User login credentials",
                        "required": true,
                        "schema": {"$ref": "#/definitions/LoginCredentials"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login successfully"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "401":{
                      "description": "Invalid login credentials"
                    },
                    "409": {
                        "description": "Invalid login credentials"
                    },
                    "422": {
                        "description": "Validation on user input failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/forgot-password":{
            "post": {
                "tags": ["User Authentication"],
                "summary": "Sends user a reset password token",
                "description": "Expects user email, the one he created the account with, and sends a reset password token to that email address.",
                "operationId": "userForgotPassword",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's email address",
                        "required": true,
                        "schema": {"$ref":"#/definitions/UserEmail"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token sent to user's email address"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid email address"
                    },
                    "422": {
                        "description": "Validation on user email input failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/validate-reset-password-token": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Validates the reset password token sent to the user's email address",
                "description": "Prompts user to provide the reset password token received and validates it.",
                "operationId": "validateResetPasswordToken",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Reset password token validation schema",
                        "required": true,
                        "schema": {"$ref": "#/definitions/ResetPasswordRequestSchema"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validation successful"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid email address or reset password token"
                    },
                    "422": {
                        "description": "Validation on user email and token input failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/set-new-password": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Set a new password for the user",
                "description": "Prompts user to set a new password for their account.",
                "operationId": "SetNewPassword",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User email and new password",
                        "required": true,
                        "schema": {"$ref": "#/definitions/SetNewPassword"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid email address"
                    },
                    "422": {
                        "description": "Validation on user inputs failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/deactivate-account": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Deactivates user's account",
                "description": "It deactivate user's account, users can not login",
                "operationId": "deactivateUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's email address and password",
                        "required": true,
                        "schema": {"$ref": "#/definitions/DeactivateUserAccount"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account deactivated"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid email address or authentication failure"
                    },
                    "422": {
                        "description": "Validation on user inputs failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/activate-account": {
            "post": {
                "tags": ["User Authentication"],
                "summary": "Activates User's account",
                "description": "It activate user account, users can login",
                "operationId": "activateUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's email address",
                        "required": true,
                        "schema": {"$ref": "#/definitions/UserEmail"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account activated"
                    },
                    "400": {
                        "description": "Empty or no request body was provided"
                    },
                    "409": {
                        "description": "Invalid email address"
                    },
                    "422": {
                        "description": "Validation on user inputs failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/users": {
            "get": {
                "tags": ["User Management"],
                "summary": "Fetch all users",
                "description": "It will return an array of user account details",
                "operationId": "fetchAllUsers",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Fetch successful"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/user/{id}": {
            "get": {
                "tags": ["User Management"],
                "summary": "Fetch user by id",
                "description": "It will return a single user account details",
                "operationId": "FetchUserById",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "User's account id",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetch successful"
                    },
                    "404": {
                        "description": "User account not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },

            "put": {
                "tags": ["User Management"],
                "summary": "Update user account details",
                "description": "User provides new account details and the old data is overwitten",
                "operationId": "updateUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's details to update",
                        "required": true,
                        "schema": {"$ref": "#/definitions/User"}
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful"
                    },
                    "400": {
                        "description": "Missing or empty request body"
                    },
                    "404": {
                        "description": "User account not found"
                    },
                    "422": {
                        "description": "User input validation failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },

            "delete": {
                "tags": ["User Management"],
                "summary": "Deletes user account",
                "description": "It deletes user account if it exits",
                "operationId": "deleteUserAccount",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "User account's id",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion successful"
                    },
                    "404": {
                        "description": "User account not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/user/post/{id}":{
            "get":{
                "tags": ["Post Management"],
                "summary": "Fetch specific user posts",
                "description": "It will return a list of post created by the user whose id is in the request parameter",
                "operationId":"fetchUserPosts",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "User id",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetch successful"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/posts": {
            "get": {
                "tags": ["Post Management"],
                "summary": "Fetch all posts",
                "description": "It will return a list of all posts ever created",
                "operationId": "fetchAllPosts",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Fetch successful"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/post/{id}":{
            "get": {
                "tags": ["Post Management"],
                "summary": "Fetch a single post",
                "description": "It will return a post whose id matches the id on the request path",
                "operationId": "fetchPostById",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Post id",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetch successful"
                    },
                    "404": {
                        "description": "post not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "tags": ["Post Management"],
                "summary": "Create a new post",
                "description": "It will create a new post based on the request body",
                "operationId": "createNewPost",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Post owner id",
                        "required": true
                    }, 
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Post details to create",
                        "required": true,
                        "schema": {"$ref":"#/definitions/Post"}
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Post created successfully"
                    },
                    "422": {
                        "description": "Post input validation failed"
                    },
                    "400":{
                        "description": "Error creating post"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },

            "delete":{
                "tags": ["Post Management"],
                "summary": "Delete an existing post",
                "description": "It will delete an existing post",
                "operationId": "deletePost",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in":"path",
                        "name": "id",
                        "description": "Post id",
                        "required": true
                    }
                ],
                "responses":{
                    "200": {
                        "description": "Post deleted successfully"
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "409": {
                        "description": "Post already deleted"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },

        "/post/{userId}/{id}": {
            "put": {
                "tags": ["Post Management"],
                "summary": "Update user post",
                "description": "It will update the user's post whose id and post id is specified in the request parameters",
                "operationId": "updateUserPost",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User's id",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Post id",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Post details",
                        "required": true,
                        "schema": {"$ref": "#/definitions/Post"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful"
                    },
                    "400": {
                        "description": "Request body is empty"
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "409": {
                        "description": "Post does not belong to the user or post is deleted"
                    },
                    "422": {
                        "description": "User input validation failed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {

        "User": {
            "type": "object",
            "required": ["firstName", "lastName", "email", "profilePicture"],
            "properties": {
                "firstName": {
                    "type": "string",
                    "description": "User's first name",
                    "example": "Paul"
                },
                "lastName": {
                    "type": "string",
                    "description": "User's last name",
                    "example": "Sanga"
                },
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "profilePicture": {
                    "type": "string",
                    "description": "User's profile picture",
                    "example": "https://www.google.com/imgres?imgurl=https%3A%2F%2Fwallpapercg.com%2Fdownload%2Fyuji-itadori-3840x2743-9543.jpg&tbnid=u9FKufbPMLQ2EM&vet=12ahUKEwibov3YmZOBAxXQkicCHat8CkAQMyhLegUIARClAg..i&imgrefurl=https%3A%2F%2Fwallpapercg.com%2Fyuji-itadori-wallpapers&docid=sk23cipVVPF6mM&w=3840&h=2743&q=itadori&ved=2ahUKEwibov3YmZOBAxXQkicCHat8CkAQMyhLegUIARClAg"
                }
            } 
        },

        "LoginCredentials": {
            "type": "object",
            "required": ["email", "userPassword"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "userPassword": {
                    "type": "string",
                    "description": "User's password",
                    "example": "pajoy9903"
                }
            }
        },

        "VerifyUserRegistration": {
            "type": "object",
            "required": ["email", "userPassword", "newPassword"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "userPassword": {
                    "type": "string",
                    "description": "OTP sent to the user's email address",
                    "example": "daightrdfn"
                },
                "newPassword": {
                    "type": "string",
                    "description": "User's password",
                    "example": "pajoy9903"
                }
            }
        },

        "UserEmail": {
            "type": "object",
            "required": ["email"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                }
            }
        },

        "ResetPasswordRequestSchema": {
            "type": "object",
            "required": ["email", "resetPasswordToken"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "resetPasswordToken": {
                    "type": "string",
                    "description": "User's password",
                    "example": "4457112d2c9673a1"
                }
            }
        },

        "SetNewPassword": {
            "type": "object",
            "required": ["email", "userPassword"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "userPassword": {
                    "type": "string",
                    "description": "User's password",
                    "example": "Test@12345."
                }
            }
        },

        "DeactivateUserAccount": {
            "type": "object",
            "required": ["email", "userPassword"],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address",
                    "example": "paul.nyamawi99@gmail.com"
                },
                "userPassword": {
                    "type": "string",
                    "description": "User's password",
                    "example": "Test@12345."
                }
            }
        },

        "Post": {
            "type": "object",
            "required": ["image", "content"],
            "properties": {
                "image": {
                    "type": "string",
                    "description": "Post image",
                    "example": "https://pin.it/4SWOUSX"
                },
                "content": {
                    "type":"string",
                    "description": "Post content",
                    "example": "Brabus G-Wagon G900"
                }
            }
        }

    }
}